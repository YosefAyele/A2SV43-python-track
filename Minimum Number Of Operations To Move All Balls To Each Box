class Solution:
    def minOperations(self, boxes: str) -> List[int]:
        # brute force solution
        res=[0]*len(boxes)

        for i in range(len(boxes)):
            operations=0
            for j in range(i):
                if boxes[j]=="1":
                    operations+=(abs(i-j))
            for k in range(i,len(boxes)):
                if boxes[k]=="1":
                    operations+=(abs(i-k))
            res[i]=operations
        
        return res
        
        #optimized O(N) solution
        class Solution:
            def minOperations(self, boxes: str) -> List[int]:
                # calculate number of operations to be done to the left and to the right of a single index

                n=len(boxes)
                # Calculate left operations
                operationsBefore=[0]*n
                onesBefore=int(boxes[0])

                for i in range(1,n):
                    operationsBefore[i]=operationsBefore[i-1]+onesBefore
                    onesBefore+=int(boxes[i])

                # Calculate right operations
                operationsAfter=[0]*n
                onesAfter=int(boxes[n-1])

                for i in range(n-2,-1,-1):
                    operationsAfter[i]=operationsAfter[i+1]+onesAfter
                    onesAfter+=int(boxes[i])

                return [operationsBefore[i]+operationsAfter[i] for i in range(n)]

        
